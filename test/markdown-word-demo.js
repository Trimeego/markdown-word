// Generated by CoffeeScript 1.3.3
(function() {
  var input, md;

  md = require("../lib/markdown-word");

  input = "## BaseView\n\nProvides some basic rendering options that other views can inherit\n\n### Options\n\n- **templateHTML : string**  The template HTML.  Should be overridden\n- **className : string**  The class to render the view into.  Should be overridden\n- **layout : string**  Either a section based or row based layout.  Should be overridden\n\n### Installation\n\n1.  Open `Browser`\n2.  Go To **WEB Link** [Test](http://www.google.com)\n3.  Web Site\n4.  Look at eh \n\n### Bulleted Installation\n\n* Open `Browser`\n* Go To **WEB Link** [Test](http://www.google.com)\n* Web Site\n* Look at eh \n\n\n### Usage\n\n#### Using a row based layout\n\nRows based layouts are useful for simple views.  In this case, the layout should have a collection of sections at the root\n\n    class NewView extends BaseView\n      model: new Backbone.Model()\n      layout: \n        rows: [ \n          fields: [\n            label: \"test\"\n            dataField: \"test\"\n            css: \"eight phone-four columns\"\n            type: \"text\"\n            required: false\n            readOnly: false\n          ]\n        ]\n\n\n\n#### Using a section based layout\n\nSection based layouts are useful for providing sectioned views.  In this case, the layout should have a collection of sections at the root\n\n    class NewView extends BaseView\n      model: new Backbone.Model()\n      layout: \n        sections:[\n          title: \"Test\"\n          rows: [ \n            fields: [\n              label: \"test\"\n              dataField: \"test\"\n              css: \"eight phone-four columns\"\n              type: \"text\"\n              required: false\n              readOnly: false\n            ]\n          ]\n        ]\n";

  md.documentFromMarkdown(input, __dirname + "/document-from-markdown.docx", function(err, file) {
    return console.log(file);
  });

}).call(this);
